{"version":3,"file":"link-validation-DfnUjA1J.js","sources":["../../src/docs/github-actions/link-validation.md?raw"],"sourcesContent":["export default \"\\n---\\ndate: 2023-08-10\\nicon: zap\\ndescription: \\\"Automatically detect and report broken links in your documentation\\\"\\ntitle: \\\"Link Validation\\\"\\norder: 3\\n---\\n\\n# Link Validation\\n\\nBroken links in documentation frustrate users and diminish trust in your content. DocuSanity's link validation feature automatically detects and reports broken links in your documentation.\\n\\n## Overview\\n\\nThe link validation tool checks both internal and external links in your documentation. It verifies that:\\n\\n- Internal links point to valid pages within your documentation\\n- Anchor links (`#section-id`) point to existing sections\\n- External links are reachable (optional)\\n\\n## How It Works\\n\\nWhen you run link validation, DocuSanity:\\n\\n1. Parses all Markdown files in your documentation\\n2. Extracts all links using regular expressions\\n3. Categorizes links as internal or external\\n4. Verifies each link's validity\\n5. Generates a report of broken links\\n\\n## Configuration\\n\\nConfigure link validation in your `docusanity.config.js` file:\\n\\n```javascript\\nmodule.exports = {\\n  checks: {\\n    links: {\\n      enabled: true,                  // Enable link validation\\n      excludePaths: ['drafts/**'],    // Exclude specific paths\\n      checkExternal: true,            // Check external links\\n      concurrency: 5,                 // Number of concurrent checks\\n      timeout: 10000,                 // Timeout for external link checks (ms)\\n      cacheResults: true,             // Cache results to improve performance\\n      ignorePatterns: [               // Regular expressions for links to ignore\\n        /^mailto:/,\\n        /^tel:/,\\n        /example\\\\.com/\\n      ]\\n    }\\n  }\\n};\\n```\\n\\n## Running Link Validation\\n\\nYou can run link validation in several ways:\\n\\n### Command Line\\n\\n```bash\\ndocusanity check links\\n```\\n\\n### Programmatically\\n\\n```javascript\\nconst { Validator } = require('@docusanity/validator');\\n\\nconst validator = new Validator('./docs');\\nvalidator.checkLinks()\\n  .then(results => console.log(results))\\n  .catch(error => console.error(error));\\n```\\n\\n### GitHub Actions\\n\\nYou can also integrate link validation into your CI/CD pipeline using [GitHub Actions](/docs/github-actions).\\n\\n## Common Issues\\n\\n- **Absolute vs. Relative Paths**: Be consistent in your approach\\n- **Case Sensitivity**: Some systems are case-sensitive in path resolution\\n- **Special Characters**: Ensure URLs with special characters are properly encoded\\n- **Missing IDs**: Anchor links require corresponding IDs in the document\\n\\n## Best Practices\\n\\n- Run link validation before publishing documentation\\n- Set up automated checks in your CI/CD pipeline\\n- Regularly validate external links, as they can break over time\\n- Use relative paths for internal links to maintain portability\\n\\nVisit [Setting Up Checks](/docs/link-validation/setup) for more detailed configuration information.\\n\""],"names":["linkValidation"],"mappings":"AAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}