{"version":3,"file":"versioning-BL6FN1Zz.js","sources":["../../src/docs/getting-started/configuration/versioning.md?raw"],"sourcesContent":["export default \"---\\ndate: 2023-08-15\\norder: 5\\nicon: git-branch\\ndescription: \\\"Configure versioning for multi-version documentation\\\"\\ntitle: \\\"Versioning Configuration\\\"\\n---\\n\\n# Versioning Configuration\\n\\nFrameD supports multiple versioning strategies to handle documentation for different releases of your software.\\n\\n## Basic Versioning Configuration\\n\\n```javascript\\nmodule.exports = {\\n  versioning: {\\n    enabled: true,                // Enable versioning\\n    currentVersion: 'v2',         // Current active version\\n    versions: [                   // Available versions\\n      { \\n        name: 'latest',           // Version identifier \\n        label: 'Latest (v2)',     // Display label\\n        path: 'latest',           // URL path segment\\n        isDefault: true           // Is this the default version?\\n      },\\n      { \\n        name: 'v2', \\n        label: 'v2.0', \\n        path: 'v2' \\n      },\\n      { \\n        name: 'v1', \\n        label: 'v1.0', \\n        path: 'v1' \\n      },\\n      { \\n        name: 'next', \\n        label: 'Next (Unreleased)', \\n        path: 'next', \\n        isPrerelease: true        // Mark as prerelease\\n      }\\n    ],\\n  }\\n};\\n```\\n\\n## Versioning Strategies\\n\\nFrameD offers three mutually exclusive strategies for versioning your documentation. You must select one approach:\\n\\n```javascript\\nversioning: {\\n  enabled: true,\\n  strategy: 'global',          // Versioning strategy (global, document, branch)\\n  // ... other versioning options\\n}\\n```\\n\\n### Choosing a Versioning Strategy\\n\\nEach versioning strategy has specific advantages:\\n\\n| Strategy | Best For | URL Format | Complexity |\\n|----------|----------|------------|------------|\\n| Global | Documentation that evolves together | `/docs/[version]/[path]` | Simple |\\n| Document | Documentation with varying update cycles | `/docs/[path]?version=[version]` | Medium |\\n| Branch | Documentation tied to code branches | `/docs/[version]/[path]` | Complex |\\n\\n**Important:** You can only enable one strategy at a time. The configuration enforces mutual exclusivity.\\n\\n### 1. Global Versioning (strategy: 'global')\\n\\n- The entire documentation set is versioned together\\n- All documents share the same version at any given time\\n- Users can switch between versions via a version selector\\n- URL structure: `/docs/[version]/[path]`\\n\\n```javascript\\nversioning: {\\n  enabled: true,\\n  strategy: 'global',\\n  // Other versioning settings...\\n  documentVersionSettings: {\\n    enabled: false,        // Must be disabled for global versioning\\n  }\\n}\\n```\\n\\n### 2. Document-level Versioning (strategy: 'document')\\n\\n- Individual documents can have their own versions\\n- Documents can specify which versions they are available in\\n- Good for documentation that evolves at different rates\\n- URL structure: `/docs/[path]?version=[version]`\\n\\n```javascript\\nversioning: {\\n  enabled: true,\\n  strategy: 'document',\\n  documentVersionSettings: {   // Document-level versioning settings\\n    enabled: true,             // Must be enabled for document-level versioning\\n    default: 'inherit',        // Default versioning for documents ('inherit', 'latest')\\n    allowOverride: true        // Allow documents to override their version\\n  }\\n}\\n```\\n\\n### 3. Branch-based Versioning (strategy: 'branch')\\n\\n- Documentation versions are mapped to git branches\\n- Each branch contains a complete set of documentation\\n- CI/CD processes build documentation from each branch\\n- Great for maintaining documentation alongside code\\n\\n```javascript\\nversioning: {\\n  enabled: true,\\n  strategy: 'branch',\\n  documentVersionSettings: {\\n    enabled: false,           // Must be disabled for branch versioning\\n  },\\n  branchMapping: {            // Branch mapping for branch-based versioning\\n    'latest': 'main',\\n    'v2': 'v2.x',\\n    'v1': 'v1.x',\\n    'next': 'develop'\\n  }\\n}\\n```\\n\\n## Version Selector Configuration\\n\\nThe version selector can be displayed in different locations:\\n\\n```javascript\\nversioning: {\\n  selector: {\\n    position: 'both',          // Where to display version selector (header, sidebar, both)\\n    showPrerelease: true       // Show prerelease versions in selector\\n  }\\n}\\n```\\n\\nAvailable positions:\\n- `position: 'header'` - Show in the top navigation bar\\n- `position: 'sidebar'` - Show in the navigation sidebar\\n- `position: 'both'` - Show in both locations\\n\\n## Prerelease Versions\\n\\nVersions marked with `isPrerelease: true` are considered unreleased or in-development documentation. You can control their visibility with the `showPrerelease` option.\\n\\n## Example: Global Versioning\\n\\n```javascript\\nmodule.exports = {\\n  title: 'API Documentation',\\n  versioning: {\\n    enabled: true,\\n    strategy: 'global',               // Global versioning for entire site\\n    currentVersion: 'v2',\\n    versions: [\\n      { name: 'v1', label: 'Version 1.0', path: 'v1' },\\n      { name: 'v2', label: 'Version 2.0', path: 'v2', isDefault: true },\\n      { name: 'v3', label: 'Version 3.0 (Beta)', path: 'v3', isPrerelease: true }\\n    ],\\n    selector: {\\n      position: 'header',\\n      showPrerelease: true,\\n    },\\n    documentVersionSettings: {\\n      enabled: false,               // Disabled for global versioning\\n    }\\n  },\\n};\\n```\\n\\n## Example: Document-level Versioning\\n\\n```javascript\\nmodule.exports = {\\n  versioning: {\\n    enabled: true,\\n    strategy: 'document',            // Document-level versioning\\n    currentVersion: 'v2',\\n    versions: [\\n      { name: 'v1', label: 'Version 1.0', path: 'v1' },\\n      { name: 'v2', label: 'Version 2.0', path: 'v2', isDefault: true },\\n      { name: 'v3', label: 'Version 3.0 (Beta)', path: 'v3', isPrerelease: true }\\n    ],\\n    documentVersionSettings: {\\n      enabled: true,                // Enabled for document-level versioning\\n      default: 'inherit',\\n      allowOverride: true\\n    }\\n  }\\n};\\n```\\n\\n## Example: Branch-based Versioning\\n\\n```javascript\\nmodule.exports = {\\n  versioning: {\\n    enabled: true,\\n    strategy: 'branch',              // Branch-based versioning\\n    currentVersion: 'latest',\\n    versions: [\\n      { name: 'latest', label: 'Latest', path: 'latest', isDefault: true },\\n      { name: 'stable', label: 'Stable', path: 'stable' },\\n      { name: 'beta', label: 'Beta', path: 'beta', isPrerelease: true }\\n    ],\\n    documentVersionSettings: {\\n      enabled: false,               // Disabled for branch versioning\\n    },\\n    branchMapping: {\\n      'latest': 'main',\\n      'stable': 'release',\\n      'beta': 'develop'\\n    }\\n  }\\n};\\n```\\n\""],"names":["versioning"],"mappings":"AAAA,MAAe}