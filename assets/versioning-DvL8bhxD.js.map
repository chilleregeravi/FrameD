{"version":3,"file":"versioning-DvL8bhxD.js","sources":["../../src/docs/getting-started/configuration/versioning.md?raw"],"sourcesContent":["export default \"\\n---\\ndate: 2023-08-15\\norder: 4\\nicon: file-text\\ndescription: \\\"Configure versioning strategies for your documentation\\\"\\ntitle: \\\"Versioning Configuration\\\"\\n---\\n\\n# Documentation Versioning\\n\\nFrameD supports multiple versioning strategies to help you manage documentation for different versions of your software. You can choose between global documentation versioning or document-level versioning, but not both simultaneously.\\n\\n## Versioning Strategies\\n\\n### Global Versioning\\n\\nGlobal versioning applies the same version to your entire documentation set. This is useful when:\\n\\n- Your documentation changes as a whole with each software release\\n- You want to maintain separate documentation sets for major versions\\n- You prefer a simpler versioning approach\\n\\nExample configuration for global versioning:\\n\\n```json\\n{\\n  \\\"enabled\\\": true,\\n  \\\"versioning\\\": \\\"global\\\",\\n  \\\"currentVersion\\\": \\\"v2\\\",\\n  \\\"versions\\\": [\\n    { \\\"name\\\": \\\"latest\\\", \\\"label\\\": \\\"Latest (v2)\\\", \\\"path\\\": \\\"latest\\\", \\\"isDefault\\\": true },\\n    { \\\"name\\\": \\\"v2\\\", \\\"label\\\": \\\"v2.0\\\", \\\"path\\\": \\\"v2\\\" },\\n    { \\\"name\\\": \\\"v1\\\", \\\"label\\\": \\\"v1.0\\\", \\\"path\\\": \\\"v1\\\" }\\n  ]\\n}\\n```\\n\\n### Document-Level Versioning\\n\\nDocument-level versioning allows individual documents to have their own versions. This is useful when:\\n\\n- Different parts of your documentation evolve independently\\n- You need to maintain version-specific content for individual features\\n- Your documentation structure is complex with varying update cycles\\n\\nExample configuration for document-level versioning:\\n\\n```json\\n{\\n  \\\"enabled\\\": true,\\n  \\\"versioning\\\": \\\"document\\\",\\n  \\\"currentVersion\\\": \\\"v2\\\",\\n  \\\"documentVersionSettings\\\": {\\n    \\\"enabled\\\": true,\\n    \\\"default\\\": \\\"inherit\\\",\\n    \\\"allowOverride\\\": true\\n  }\\n}\\n```\\n\\n> **Note:** You must choose either global or document-level versioning. These strategies cannot be used together.\\n\\n## Version Configuration\\n\\nThe version configuration is managed through the `version-config.json` file:\\n\\n| Option | Type | Description |\\n|--------|------|-------------|\\n| `enabled` | boolean | Enable/disable versioning |\\n| `versioning` | \\\"global\\\" \\\\| \\\"document\\\" | The versioning strategy to use |\\n| `currentVersion` | string | The default version to display |\\n| `versions` | array | List of available versions |\\n| `selector.position` | \\\"header\\\" \\\\| \\\"sidebar\\\" \\\\| \\\"both\\\" | Where to display the version selector |\\n| `selector.showPrerelease` | boolean | Whether to show pre-release versions |\\n\\n### Version Object Structure\\n\\nEach version in the `versions` array has the following properties:\\n\\n```json\\n{\\n  \\\"name\\\": \\\"v2\\\",\\n  \\\"label\\\": \\\"Version 2.0\\\",\\n  \\\"path\\\": \\\"v2\\\",\\n  \\\"isDefault\\\": false,\\n  \\\"isPrerelease\\\": false\\n}\\n```\\n\\n## Environment Variables\\n\\nYou can override version settings using environment variables:\\n\\n- `FRAMED_VERSION`: Override the current version\\n- `FRAMED_DISABLE_VERSIONING`: Disable versioning entirely\\n\\n## Usage Examples\\n\\n### Switching Between Strategies\\n\\nTo switch from global to document-level versioning:\\n\\n1. Update your version configuration:\\n```json\\n{\\n  \\\"versioning\\\": \\\"document\\\",\\n  \\\"documentVersionSettings\\\": {\\n    \\\"enabled\\\": true\\n  }\\n}\\n```\\n\\n2. Restart your documentation server for changes to take effect.\\n\\n### Adding a New Version\\n\\nTo add a new version to global versioning:\\n\\n```json\\n{\\n  \\\"versions\\\": [\\n    { \\\"name\\\": \\\"latest\\\", \\\"label\\\": \\\"Latest (v3)\\\", \\\"path\\\": \\\"latest\\\", \\\"isDefault\\\": true },\\n    { \\\"name\\\": \\\"v3\\\", \\\"label\\\": \\\"v3.0\\\", \\\"path\\\": \\\"v3\\\" },\\n    { \\\"name\\\": \\\"v2\\\", \\\"label\\\": \\\"v2.0\\\", \\\"path\\\": \\\"v2\\\" }\\n  ]\\n}\\n```\\n\\n## Best Practices\\n\\n1. Choose the appropriate strategy based on your documentation structure\\n2. Use clear version labels that match your software versions\\n3. Keep the version selector position consistent\\n4. Document version-specific features clearly\\n5. Consider using pre-release versions for beta documentation\\n\\n\""],"names":["versioning"],"mappings":"AAAA,MAAe}